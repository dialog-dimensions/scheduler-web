@inject NavigationManager NavigationManager

@page "/about-security"
@using Microsoft.AspNetCore.WebUtilities
<h3>אבטחת מידע</h3>

הפרויקט משתמש ב-Microsoft Identity לניהול משתמשים, מה שמבטיח אימות והרשאה מאובטחים.
התקשורת מוגנת דרך HTTPS, מה שמבטיח שכל הנתונים בתהליך ההעברה מוצפנים.
Azure Key Vault מאחסן באופן מאובטח סודות כמו מפתחות חתימה, דבר שמשפר את האבטחה על ידי ריכוז הנתונים הרגישים.
JWT (JSON Web Tokens) משמשים לגישה מבוססת טוקנים באופן מאובטח, עם אלגוריתם HMACSHA256 המבטיח את תקינות ואבטחת הטוקנים.

אנו לא משתפים נתונים עם צדדים שלישיים, כולל WhatsApp עצמו.
הנתונים שאנו אוספים הם רק אלו הדרושים באופן ישיר לתפקוד התוכנה.
כל הנתונים משמשים למטרות הפנימיות של התוכנה ולא ישותפו או ימכרו לצדדים שלישיים כלל.

אנו לא מזהים את העובד עם שיוכו לאף ארגון או מקום, ובתוך כך ישנה הקפדה על אי-זיהוי המסגרת התעסוקתית בה השימוש בתוכנה נעשה.

המידע שאנו אוספים על משתמשי התוכנה:
1. מידע שמוזן על ידי המנהל (עצם ה'עובד'):
1.1. שם תצוגה
1.2. מספר זיהוי כלשהו
1.3. האם פעיל בביצוע המשמרות
1.4. תפקידו ביחס לניהול המשמרות: עובד/אחראי שיבוץ/מנהלן מערכת
1.5. מספר טלפון לשליחת הודעת הצטרפות*
2. מידע שמוזן על ידי העובד (עצם ה'משתמש'):
2.1. מספר טלפון ליצירת קשר**
2.2. מספר זיהוי - תואם למספר הזיהוי שהוזן ע"י המנהל
2.3. שם פרטי (באנגלית)
2.4. סיסמה***


*מספר הטלפון שמוזן על ידי המנהל אינו נשמר במערכות המידע, והוא משמש אך ורק למטרת שליחת הודעת ההצטרפות לאפליקציה. מספר הטלפון הנ"ל נשמר ברישומי המערכת לצורכי רישומי לוג לתקופה של חודשיים ואז נמחק.
** בניגוד למספר הטלפון שמוזן לצורך שליחת הודעת ההצטרפות, מספר הטלפון שמוזן על ידי העובד עצמו נשמר כחלק מהגדרות המשתמש בMicrosoft Identity.
*** הסיסמה נשמרת כחלק מהגדרות המשתמש לאחר תהליך גיבוב (Hashing). לאף עובד, מנהל או מנהלן אין אפשרות לצפות בסיסמה שמוזנת למערכת, ואימות הסיסמה בהתחברות מתבצע ע"י Microsoft Identity.

<div class="mt-3">
    <a href="@ProceedUri">המשך</a>
</div>
<div class="mt-3">
    <a href="@AboutUri">בחזרה למידע כללי</a>
</div>

@code {
    private string ProceedUri => RedirectUri;
    private string AboutUri => $"/about?redirect={RedirectUri}";
    private string RedirectUri { get; set; } = string.Empty;

    protected override void OnInitialized()
    {
        var uri = new Uri(NavigationManager.Uri);
        var hasUriRedirect = QueryHelpers.ParseQuery(uri.Query).TryGetValue("redirect", out var redirect);

        if (hasUriRedirect)
        {
            RedirectUri = redirect!;
        }
    }
}