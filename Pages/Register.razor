
@page "/register"
@using Microsoft.AspNetCore.WebUtilities
@using SchedulerWeb.Models
@using SchedulerWeb.Services.Api.Interfaces
@inject NavigationManager NavigationManager
@inject IAuthenticationService AuthService

<h3>הרשמה</h3>

<EditForm Model="@registration" OnValidSubmit="HandleRegistration">
    <div class="form-group">
        <label for="id">מספר זיהוי:</label>
        <InputText id="id" class="form-control" @bind-Value="registration.Id" />
    </div>
    <div class="form-group">
        <label for="phone">מספר טלפון (...05):</label>
        <InputText id="phone" class="form-control" @bind-Value="registration.PhoneNumber" />
    </div>
    <div class="form-group">
        <label for="name">שם פרטי (אנגלית):</label>
        <InputText id="name" class="form-control" @bind-Value="registration.UserName"/>
    </div>
    <div class="form-group">
        <label for="password">סיסמה:</label>
        <InputText id="password" type="password" class="form-control" @bind-Value="registration.Password" />
    </div>
    <div class="form-group">
        <label for="confirm">אימות סיסמה:</label>
        <InputText id="confirm" type="password" class="form-control" @bind-Value="registration.ConfirmPassword"/>
    </div>
    <button type="submit" class="btn btn-primary">שליחה</button>
</EditForm>

@if (!string.IsNullOrEmpty(_errorMessage))
{
    <div class="alert alert-danger" role="alert">
        @_errorMessage
    </div>
}

<div class="mt-3">
    <a href="@_loginRedirect">יש לי חשבון</a>
</div>

@code {
    private string _errorMessage = string.Empty;
    private RegistrationModel registration = new();
    private string _redirect = "success-exit";
    private string _loginRedirect => $"/login?userId={registration.Id}";
    
    protected override async Task OnInitializedAsync()
    {
        var uri = new Uri(NavigationManager.Uri);
        var hasUriRedirect = QueryHelpers.ParseQuery(uri.Query).TryGetValue("redirect", out var redirect); 
        var hasUriId = QueryHelpers.ParseQuery(uri.Query).TryGetValue("userId", out var id);
        var hasUriPhoneNumber = QueryHelpers.ParseQuery(uri.Query).TryGetValue("phoneNumber", out var phoneNumber);

        if (hasUriRedirect)
        {
            _redirect = redirect!;
        }
        
        if (hasUriId)
        {
            registration.Id = id!;
        }
        
        if (hasUriPhoneNumber)
        {
            registration.PhoneNumber = phoneNumber!;
        }
        
        await base.OnInitializedAsync();
    }

    private async Task HandleRegistration()
    {
        _errorMessage = string.Empty;
        
        var result = await AuthService.RegisterAsync(registration.Id, registration.UserName, registration.PhoneNumber, 
            registration.Password, registration.ConfirmPassword);

        if (result is null)
        {
            NavigationManager.NavigateTo($"/{_redirect}");
        }

        else
        {
            _errorMessage = result;
        }
    }
}
