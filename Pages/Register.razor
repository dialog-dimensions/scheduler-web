
@page "/register"
@using Microsoft.AspNetCore.WebUtilities
@using SchedulerWeb.Models
@using SchedulerWeb.Services.Api.Interfaces
@inject NavigationManager NavigationManager
@inject IAuthenticationService AuthService

<h3>הרשמה</h3>

<EditForm Model="@_registration" OnValidSubmit="HandleRegistration">
    <div class="form-group">
        <label for="id">מספר זיהוי:</label>
        <InputText id="id" class="form-control" @bind-Value="_registration.Id" />
    </div>
    <div class="form-group">
        <label for="phone">מספר טלפון (...05):</label>
        <InputText id="phone" class="form-control" @bind-Value="_registration.PhoneNumber" />
    </div>
    @* <div class="form-group"> *@
    @*     <label for="name">שם פרטי (אנגלית):</label> *@
    @*     <InputText id="name" class="form-control" @bind-Value="registration.UserName"/> *@
    @* </div> *@
    <div class="form-group">
        <label for="password">סיסמה:</label>
        <InputText id="password" type="password" class="form-control" @bind-Value="_registration.Password" />
    </div>
    <div class="form-group">
        <label for="confirm">אימות סיסמה:</label>
        <InputText id="confirm" type="password" class="form-control" @bind-Value="_registration.ConfirmPassword"/>
    </div>
    <button type="submit" class="btn btn-primary">שליחה</button>
</EditForm>

@if (!string.IsNullOrEmpty(_errorMessage))
{
    <div class="alert alert-danger" role="alert">
        @_errorMessage
    </div>
}

<div class="mt-3">
    <a href="@LoginRedirect">יש לי חשבון</a>
</div>

@code {
    private string _errorMessage = string.Empty;
    private readonly RegistrationModel _registration = new();
    private string _redirect = "success-exit";
    private string LoginRedirect => $"/login?userId={_registration.Id}";
    
    protected override async Task OnInitializedAsync()
    {
        var uri = new Uri(NavigationManager.Uri);
        var hasUriRedirect = QueryHelpers.ParseQuery(uri.Query).TryGetValue("redirect", out var redirect); 
        var hasUriId = QueryHelpers.ParseQuery(uri.Query).TryGetValue("userId", out var id);
        var hasUriPhoneNumber = QueryHelpers.ParseQuery(uri.Query).TryGetValue("phoneNumber", out var phoneNumber);

        if (hasUriRedirect)
        {
            _redirect = redirect!;
        }
        
        if (hasUriId)
        {
            _registration.Id = id!;
        }
        
        if (hasUriPhoneNumber)
        {
            _registration.PhoneNumber = phoneNumber!;
        }
        
        await base.OnInitializedAsync();
    }

    private async Task HandleRegistration()
    {
        var validationErrors = ValidationErrors().ToList();
        if (validationErrors.Any())
        {
            _errorMessage = string.Join("\n", validationErrors);
            return;
        }
        
        _errorMessage = string.Empty;
        
        var result = await AuthService.RegisterAsync(_registration.Id, _registration.PhoneNumber, 
            _registration.Password, _registration.ConfirmPassword);

        if (result is null)
        {
            NavigationManager.NavigateTo($"/{_redirect}");
        }

        else
        {
            _errorMessage = result;
        }
    }
    
    private IEnumerable<string> ValidationErrors()
    {
        var password = _registration.Password;
        var result = new List<string>();
        
        if (password.Length < 6)
        {
            result.Add("Password must be at least 6 characters");
        }
        if (password == password.ToLower())
        {
            result.Add("Password must contain at least one uppercase letter");
        }
        if (password == password.ToUpper())
        {
            result.Add("Password must contain at least one lowercase letter");
        }
        if (!password.Intersect(Digits).Any())
        {
            result.Add("Password must contain at least one digit");
        }

        return result;
    }

    private const string Digits = "1234567890";
}
