@page "/view"
@page "/view/{Which}"

@using SchedulerWeb.Views.ViewSchedule
@using Microsoft.IdentityModel.Tokens
@using SchedulerWeb.Models.Entities
@using SchedulerWeb.Models.UiModels
@using SchedulerWeb.Services.Api.Interfaces
@using SchedulerWeb.Services.EuiTransform.Interfaces
@using SchedulerWeb.Services.RuntimeUtils.Interfaces
@inject IScheduleService ScheduleService
@inject NavigationManager NavigationManager
@inject IEuiTransformer EuiTransformer
@inject IRuntimeTools RuntimeTools


<h3>@_title</h3>
<div class="mt-3">
    <a href="@_otherScheduleRedirect">@_otherScheduleText</a>.
</div>

<ScheduleGrid ScheduleData="@scheduleData"/>

@code {
    [Parameter] 
    public string Which { get; set; }
    private List<List<GridSlot>> scheduleData = [];
    
    private string _otherScheduleRedirect => $"/view/{(Which is "next" ? "current" : "next")}";
    private string _otherScheduleText => Which is "next" ? "צפה בשבוע הנוכחי" : "צפה בשבוע הבא";
    private string _title => Which is "next" ? "משמרות השבוע הבא" : "משמרות השבוע הנוכחי";
    
    protected override async Task OnParametersSetAsync()
    {
        Schedule? schedule = default;
        
        if (Which.IsNullOrEmpty() || Which == "current")
        {
            schedule = await ScheduleService.GetCurrentScheduleAsync();
        }
        else if (Which == "next")
        {
            schedule = await ScheduleService.GetNextScheduleAsync();
        }

        if (schedule is null)
        {
            NavigationManager.NavigateTo("/", true);
            return;
        }
        
        scheduleData = EuiTransformer.TransformToViewModel(schedule);
        
        await base.OnParametersSetAsync();
    }

    protected override async Task OnInitializedAsync()
    {
        var validToken = await RuntimeTools.TryGetValidTokenAsync();
        var memoryId = await RuntimeTools.TryGetIdAsync();
        
        if (validToken is null)
        {
            NavigationManager.NavigateTo($"/login?{(memoryId.IsNullOrEmpty() ? "" : $"userId={memoryId}&")}redirect=view/{Which}");
            return;
        }
        
        await base.OnInitializedAsync();
    }

}