@page "/view/{DeskId}"
@page "/view/{DeskId}/{Which}"

@using SchedulerWeb.Views.ViewSchedule
@using Microsoft.IdentityModel.Tokens
@using SchedulerWeb.Models.Entities
@using SchedulerWeb.Models.UiModels
@using SchedulerWeb.Services.Api.Interfaces
@using SchedulerWeb.Services.EuiTransform.Interfaces
@using SchedulerWeb.Services.RuntimeUtils.Interfaces
@inject IScheduleService ScheduleService
@inject NavigationManager NavigationManager
@inject IEuiTransformer EuiTransformer
@inject IRuntimeTools RuntimeTools


<h3>@Title</h3>
<div class="mt-3">
    <a href="@OtherScheduleRedirect">@OtherScheduleText</a>
</div>

<ScheduleGrid ScheduleData="@_scheduleData"/>

@code {
    [Parameter] 
    public string Which { get; set; } = "";

    [Parameter] 
    public string DeskId { get; set; } = "";

    private List<List<GridSlot>> _scheduleData = [];
    
    private string OtherScheduleRedirect => $"/view/{DeskId}/{(Which is "next" ? "current" : "next")}";
    private string OtherScheduleText => Which is "next" ? "צפה בשבוע הנוכחי" : "צפה בשבוע הבא";
    private string Title => Which is "next" ? "משמרות השבוע הבא" : "משמרות השבוע הנוכחי";
    
    protected override async Task OnParametersSetAsync()
    {
        Schedule? schedule = default;
        
        if (Which.IsNullOrEmpty() || Which == "current")
        {
            schedule = await ScheduleService.GetCurrentScheduleAsync(DeskId);
        }
        else if (Which == "next")
        {
            schedule = await ScheduleService.GetNextScheduleAsync(DeskId);
        }

        if (schedule is null)
        {
            NavigationManager.NavigateTo($"/error?redirect=view/{Which}", true);
            return;
        }
        
        _scheduleData = EuiTransformer.TransformToViewModel(schedule);
        
        await base.OnParametersSetAsync();
    }

    protected override async Task OnInitializedAsync()
    {
        await RuntimeTools.RegisterHomePageUriAsync($"view/{DeskId}");
        
        var validToken = await RuntimeTools.TryGetValidTokenAsync();
        var memoryId = await RuntimeTools.TryGetIdAsync();
        
        if (validToken is null)
        {
            NavigationManager.NavigateTo($"/login?{(memoryId.IsNullOrEmpty() ? "" : $"userId={memoryId}&")}redirect=view/{DeskId}/{Which}");
            return;
        }
        
        await base.OnInitializedAsync();
    }

}