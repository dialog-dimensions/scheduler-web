@page "/login"
@using Microsoft.AspNetCore.WebUtilities
@using Microsoft.IdentityModel.Tokens
@using SchedulerWeb.Models
@using SchedulerWeb.Services.Api.Interfaces
@using SchedulerWeb.Services.RuntimeUtils.Interfaces
@inject IAuthenticationService AuthService
@inject NavigationManager NavigationManager
@inject IRuntimeTools RuntimeTools


<EditForm Model="@_loginModel" OnValidSubmit="@HandleLogin">
    <DataAnnotationsValidator />
    <ValidationSummary />

    <div class="form-group">
        <label for="id">מספר זיהוי:</label>
        <InputText id="id" class="form-control" @bind-Value="_loginModel.Id" />
    </div>
    <div class="form-group">
        <label for="password">סיסמה:</label>
        <InputText id="password" type="password" class="form-control" @bind-Value="_loginModel.Password" />
    </div>
    <button type="submit" class="btn btn-primary">כניסה</button>
</EditForm>

@if (!string.IsNullOrEmpty(_errorMessage))
{
    <div class="alert alert-danger" role="alert">
        @_errorMessage
    </div>
}

<div class="mt-3">
    <a href="@RegisterUrl">הרשמה</a>.
</div>


@code {
    private readonly LoginModel _loginModel = new();
    private string _errorMessage = string.Empty;
    private string _redirect = string.Empty;

    private string RegisterUrl => 
        $"register" +
        $"{(string.IsNullOrEmpty(_loginModel.Id) ? "" : $"?userId={_loginModel.Id}")}" +
        $"{(_redirect.IsNullOrEmpty() ? "" : $"{(_loginModel.Id.IsNullOrEmpty() ? "?" : "&")}redirect={_redirect}")}";
    
    private async Task HandleLogin()
    {
        try
        {
            _errorMessage = string.Empty;
            var result = await AuthService.LoginAsync(_loginModel.Id, _loginModel.Password);
            if (result)
            {
                NavigationManager.NavigateTo($"/{_redirect}", forceLoad: true); // Redirect on success
            }
            else
            {
                _errorMessage = "Login failed. Please check your credentials.";
            }
        }
        catch (Exception ex)
        {
            _errorMessage = $"Error: {ex.Message}\nStackTrace: {ex.StackTrace}";
        }
    }
    
    protected override async Task OnInitializedAsync()
    {
        var uri = new Uri(NavigationManager.Uri);
        var hasUriRedirect = QueryHelpers.ParseQuery(uri.Query).TryGetValue("redirect", out var redirect);
        var hasUriId = QueryHelpers.ParseQuery(uri.Query).TryGetValue("userId", out var id);
        
        if (hasUriRedirect)
        {
            _redirect = redirect!;
        }
        
        if (hasUriId)
        {
            _loginModel.Id = id!;
        }
        
        else
        {
            _loginModel.Id = await RuntimeTools.TryGetIdAsync() ?? string.Empty;
        }
    }
}
