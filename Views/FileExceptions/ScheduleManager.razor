@using SchedulerWeb.Enums
@using SchedulerWeb.Models.UiModels
@using SchedulerWeb.Services.Api.Interfaces
@using SchedulerWeb.Services.EuiTransform.Interfaces
@using SchedulerWeb.Services.RuntimeUtils.Interfaces
@using SchedulerWeb.Models.Entities
@inject IEuiTransformer Transformer
@inject IScheduleService ScheduleApiService
@inject IExceptionService ExceptionApiService
@inject IJSRuntime JsRuntime
@inject NavigationManager NavigationManager
@inject IRuntimeTools RuntimeTools
@inject IConfiguration Configuration

<ScheduleGrid ScheduleData="@ScheduleData" OnExceptionApplied="HandleExceptionApplied" />
<ColorPicker OnExceptionChanged="HandleExceptionSelected" />
<SubmitButton OnSubmitted="HandleSubmitted" />

@if (!string.IsNullOrEmpty(_errorMessage))
{
    <div class="alert alert-danger" role="alert">
        @_errorMessage
    </div>
}

@code {
    private ExceptionType _selectedExceptionType = ExceptionType.NoException;

    private List<List<GridSlot>> _scheduleData = [];

    private List<List<GridSlot>> ScheduleData
    {
        get => _scheduleData;
        set
        {
            var allShifts = value.SelectMany(day => day.Select(g => g)).ToList();
            _scheduleData = value;
            _maxNumOfConstraints = allShifts.Count * Configuration.GetValue<double>("Params:File:Constraints:MaxPct");
            _constraintsFiled = allShifts.Count(shift => shift.ExceptionType == ExceptionType.Constraint);
        }
    }
    
    private string _errorMessage = string.Empty;
    
    private int _constraintsFiled = 0;
    private double _maxNumOfConstraints = 0.0;
    
    private bool _isSubmitting = false;
    private bool _submissionFailed = false;
    
    protected override async Task OnInitializedAsync()
    {
        await RuntimeTools.RegisterHomePageUriAsync("file");
        
        var parseId = int.TryParse(await JsRuntime.InvokeAsync<string>("localStorage.getItem", "id"), out var userId);
        if (!parseId)
        {
            NavigationManager.NavigateTo("/login?redirect=file", true);
            return;
        }

        var token = await RuntimeTools.TryGetValidTokenAsync();
        if (token is null)
        {
            NavigationManager.NavigateTo($"/login?userId={userId}&redirect=file");
            return;
        }
        
        Schedule? schedule = default;

        try
        {
            schedule = await ScheduleApiService.GetScheduleToFileAsync();
        }
        catch(HttpRequestException ex)
        {
            _errorMessage = ex.Message;
        }
        
        if (schedule is null)
        {
            NavigationManager.NavigateTo("/submission-closed", true);
            return;
        }
        
        var exceptions = await ExceptionApiService.GetExceptionsAsync(schedule.StartDateTime, userId);
        if (exceptions is null)
        {
            _errorMessage = "Unable to load existing exceptions. Submission may override.";
            exceptions = new List<ShiftException>();
        }
        
        ScheduleData = Transformer.TransformToUiModel(schedule, exceptions);
    }

    private void HandleExceptionSelected(ExceptionType exceptionType)
    {
        _selectedExceptionType = exceptionType;
    }

    
    private void HandleExceptionApplied(GridSlot slot)
    {
        if (_selectedExceptionType == ExceptionType.Constraint && _constraintsFiled >= _maxNumOfConstraints)
        {
            return;
        }

        if (_selectedExceptionType != ExceptionType.Constraint && slot.ExceptionType == ExceptionType.Constraint)
        {
            _constraintsFiled--;
        }
        
        slot.ExceptionType = _selectedExceptionType;
        if (_selectedExceptionType == ExceptionType.Constraint)
        {
            _constraintsFiled++;
        }
    }

    private async Task HandleSubmitted()
    {
        _submissionFailed = false;
        var exceptions = await Transformer.TransformToEntityModel(ScheduleData);
        try
        {
            _isSubmitting = true;
            await ExceptionApiService.FileExceptionsAsync(exceptions);
            _isSubmitting = false;
            NavigationManager.NavigateTo("/success-exit", true);
        }
        catch
        {
            _submissionFailed = true;
            throw;
        }
    }

}
