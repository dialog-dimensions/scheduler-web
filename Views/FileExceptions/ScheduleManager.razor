@using SchedulerWeb.Enums
@using SchedulerWeb.Models.UiModels
@using SchedulerWeb.Services.Api.Interfaces
@using SchedulerWeb.Services.EuiTransform.Interfaces
@using SchedulerWeb.Services.RuntimeUtils.Interfaces
@using SchedulerWeb.Models.Entities
@using SchedulerWeb.Views.UIComponents
@inject IEuiTransformer Transformer
@inject IScheduleService ScheduleApiService
@inject IExceptionService ExceptionApiService
@inject IJSRuntime JsRuntime
@inject NavigationManager NavigationManager
@inject IRuntimeTools RuntimeTools
@inject IConfiguration Configuration

<ScheduleGrid ScheduleData="@ScheduleData" OnExceptionApplied="HandleExceptionApplied" />
<ColorPicker OnExceptionChanged="HandleExceptionSelected" />
<SubmitButton OnSubmitted="HandleSaveClicked" ExcessiveConstraints="@ExcessiveConstraints"/>
<Modal Message="@ModalMessage" IsVisible="@_showModal" IsVisibleChanged="HandleModalVisibilityChange" SubmissionRequested="HandleSubmissionRequested"/>

@if (!string.IsNullOrEmpty(_errorMessage))
{
    <div class="alert alert-danger" role="alert">
        @_errorMessage
    </div>
}
@code {
    [Parameter] 
    public string DeskId { get; set; } = "";
    
    private bool _showModal = false;

    private string ModalMessage => $"בהזנה של יותר מ {_maxNumOfConstraints} אילוצים אדומים, הנך עלול לרדת למתכונת שכר נמוכה לשבוע הבא.";

    private bool ExcessiveConstraints => _constraintsFiled > _maxNumOfConstraints;
    
    private ExceptionType _selectedExceptionType = ExceptionType.NoException;

    private List<List<GridSlot>> _scheduleData = [];

    private List<List<GridSlot>> ScheduleData
    {
        get => _scheduleData;
        set
        {
            var allShifts = value.SelectMany(day => day.Select(g => g)).ToList();
            _scheduleData = value;
            _maxNumOfConstraints = (int)(allShifts.Count * Configuration.GetValue<double>("Params:File:Constraints:MaxPct"));
            _constraintsFiled = allShifts.Count(shift => shift.ExceptionType == ExceptionType.Constraint);
        }
    }
    
    private string _errorMessage = string.Empty;
    
    private int _constraintsFiled = 0;
    private int _maxNumOfConstraints = 0;
    
    private bool _isSubmitting = false;
    private bool _submissionFailed = false;

    private bool _isPut = false;
    private DateTime _scheduleDateTime;
    private int _employeeId;
    
    protected override async Task OnInitializedAsync()
    {
        await RuntimeTools.RegisterHomePageUriAsync($"file/{DeskId}");
        
        var parseId = int.TryParse(await JsRuntime.InvokeAsync<string>("localStorage.getItem", "id"), out var userId);
        if (!parseId)
        {
            NavigationManager.NavigateTo($"/login?redirect=file/{DeskId}", true);
            return;
        }

        var token = await RuntimeTools.TryGetValidTokenAsync();
        if (token is null)
        {
            NavigationManager.NavigateTo($"/login?userId={userId}&redirect=file/{DeskId}");
            return;
        }
        
        Schedule? schedule = default;

        try
        {
            schedule = await ScheduleApiService.GetScheduleToFileAsync(DeskId);
        }
        catch(HttpRequestException ex)
        {
            _errorMessage = ex.Message;
        }
        
        if (schedule is null)
        {
            NavigationManager.NavigateTo("/submission-closed", true);
            return;
        }
        
        var exceptions = await ExceptionApiService.GetExceptionsAsync(schedule.DeskId, schedule.StartDateTime, userId);
        var shiftExceptions = (exceptions ?? Array.Empty<ShiftException>()).ToList();
        if (exceptions is null)
        {
            _errorMessage = "Unable to load existing exceptions. Submission may override.";
            shiftExceptions = [];
        }
        else if (shiftExceptions.Any())
        {
            _isPut = true;
            _scheduleDateTime = schedule.StartDateTime;
            _employeeId = userId;
        }
        
        ScheduleData = Transformer.TransformToUiModel(schedule, shiftExceptions);
    }

    private void HandleExceptionSelected(ExceptionType exceptionType)
    {
        _selectedExceptionType = exceptionType;
    }

    
    private void HandleExceptionApplied(GridSlot slot)
    {
        if (_selectedExceptionType == slot.ExceptionType)
        {
            return;
        }

        if (slot.ExceptionType == ExceptionType.Constraint)
        {
            _constraintsFiled--;
        }

        else if (_selectedExceptionType == ExceptionType.Constraint)
        {
            _constraintsFiled++;
        }

        slot.ExceptionType = _selectedExceptionType;
    }

    private async Task HandleSubmitted()
    {
        _submissionFailed = false;
        var exceptions = await Transformer.TransformToEntityModel(ScheduleData);
        try
        {
            _isSubmitting = true;
            
            if (_isPut)
            {
                await ExceptionApiService.PutExceptionsAsync(DeskId, _scheduleDateTime, _employeeId, exceptions);
            }
            else
            {
                await ExceptionApiService.FileExceptionsAsync(exceptions);
            }
            
            _isSubmitting = false;
            NavigationManager.NavigateTo("/success-exit", true);
        }
        catch
        {
            _submissionFailed = true;
            throw;
        }
    }

    private async Task HandleSaveClicked()
    {
        if (ExcessiveConstraints)
        {
            _showModal = true;
            return;
        }

        await HandleSubmissionRequested(true);
    }
    
    private async Task HandleModalVisibilityChange(bool isVisible)
    {
        _showModal = isVisible;
    }

    private async Task HandleSubmissionRequested(bool requested)
    {
        if (!requested) return;
        await HandleSubmitted();
    }
}
